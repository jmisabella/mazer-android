// models/CellSize.kt
package com.jmisabella.mazeq.models

enum class CellSize(val value: Int) {
    TINY(11), SMALL(12), MEDIUM(13), LARGE(14);

    val label: String
        get() = when (this) {
            TINY -> "Tiny"
            SMALL -> "Small"
            MEDIUM -> "Medium"
            LARGE -> "Large"
        }
}

// models/Coordinates.kt
package com.jmisabella.mazeq.models

import kotlinx.serialization.Serializable

@Serializable
data class Coordinates(
    val x: Int,
    val y: Int
)

// models/HeatMapPalette.kt
package com.jmisabella.mazeq.models

data class HeatMapPalette(
    val name: String,
    val shades: List<String>
)

val turquoisePalette = HeatMapPalette("Turquoise", listOf(
    "#e8f8f5", "#d1f2eb", "#a3e4d7", "#76d7c4", "#48c9b0",
    "#1abc9c", "#17a589", "#148f77", "#117864", "#0e6251"
))

val greenSeaPalette = HeatMapPalette("Green Sea", listOf(
    "#e8f6f3", "#d0ece7", "#a2d9ce", "#73c6b6", "#45b39d",
    "#16a085", "#138d75", "#117a65", "#0e6655", "#0b5345"
))

val emeraldPalette = HeatMapPalette("Emerald", listOf(
    "#eafaf1", "#d5f5e3", "#abebc6", "#82e0aa", "#58d68d",
    "#2ecc71", "#28b463", "#239b56", "#1d8348", "#186a3b"
))

val nephritisPalette = HeatMapPalette("Nephritis", listOf(
    "#e9f7ef", "#d4efdf", "#a9dfbf", "#7dcea0", "#52be80",
    "#27ae60", "#229954", "#1e8449", "#196f3d", "#145a32"
))

val peterRiverPalette = HeatMapPalette("Peter River", listOf(
    "#ebf5fb", "#d6eaf8", "#aed6f1", "#85c1e9", "#5dade2",
    "#3498db", "#2e86c1", "#2874a6", "#21618c", "#1b4f72"
))

val belizeHolePalette = HeatMapPalette("Belize Hole", listOf(
    "#eaf2f8", "#d4e6f1", "#a9cce3", "#7fb3d5", "#5499c7",
    "#2980b9", "#2471a3", "#1f618d", "#1a5276", "#154360"
))

val amethystPalette = HeatMapPalette("Amethyst", listOf(
    "#f5eef8", "#ebdef0", "#d7bde2", "#c39bd3", "#af7ac5",
    "#9b59b6", "#884ea0", "#76448a", "#633974", "#512e5f"
))

val wisteriaPalette = HeatMapPalette("Wisteria", listOf(
    "#f4ecf7", "#e8daef", "#d2b4de", "#bb8fce", "#a569bd",
    "#8e44ad", "#7d3c98", "#6c3483", "#5b2c6f", "#4a235a"
))

val sunflowerPalette = HeatMapPalette("Sunflower", listOf(
    "#fef9e7", "#fcf3cf", "#f9e79f", "#f7dc6f", "#f4d03f",
    "#f1c40f", "#d4ac0d", "#b7950b", "#9a7d0a", "#7d6608"
))

val orangePalette = HeatMapPalette("Orange", listOf(
    "#fef5e7", "#fdebd0", "#fad7a0", "#f8c471", "#f5b041",
    "#f39c12", "#d68910", "#b9770e", "#9c640c", "#7e5109"
))

val carrotPalette = HeatMapPalette("Carrot", listOf(
    "#fdf2e9", "#fae5d3", "#f5cba7", "#f0b27a", "#eb984e",
    "#e67e22", "#ca6f1e", "#af601a", "#935116", "#784212"
))

val pumpkinPalette = HeatMapPalette("Pumpkin", listOf(
    "#fbeee6", "#f6ddcc", "#edbb99", "#e59866", "#dc7633",
    "#d35400", "#ba4a00", "#a04000", "#873600", "#6e2c00"
))

val alizarinPalette = HeatMapPalette("Alizarin", listOf(
    "#fdedec", "#fadbd8", "#f5b7b1", "#f1948a", "#ec7063",
    "#e74c3c", "#cb4335", "#b03a2e", "#943126", "#78281f"
))

val pomegranatePalette = HeatMapPalette("Pomegranate", listOf(
    "#f9ebea", "#f2d7d5", "#e6b0aa", "#d98880", "#cd6155",
    "#c0392b", "#a93226", "#922b21", "#7b241c", "#641e16"
))

val cloudsPalette = HeatMapPalette("Clouds", listOf(
    "#fdfefe", "#fbfcfc", "#f7f9f9", "#f4f6f7", "#f0f3f4",
    "#ecf0f1", "#d0d3d4", "#b3b6b7", "#979a9a", "#7b7d7d"
))

val silverPalette = HeatMapPalette("Silver", listOf(
    "#f8f9f9", "#f2f3f4", "#e5e7e9", "#d7dbdd", "#cacfd2",
    "#bdc3c7", "#a6acaf", "#909497", "#797d7f", "#626567"
))

val concretePalette = HeatMapPalette("Concrete", listOf(
    "#f4f6f6", "#eaeded", "#d5dbdb", "#bfc9ca", "#aab7b8",
    "#95a5a6", "#839192", "#717d7e", "#5f6a6a", "#4d5656"
))

val asbestosPalette = HeatMapPalette("Asbestos", listOf(
    "#f2f4f4", "#e5e8e8", "#ccd1d1", "#b2babb", "#99a3a4",
    "#7f8c8d", "#707b7c", "#616a6b", "#515a5a", "#424949"
))

val wetAsphaltPalette = HeatMapPalette("Wet Asphalt", listOf(
    "#ebedef", "#d6dbdf", "#aeb6bf", "#85929e", "#5d6d7e",
    "#34495e", "#2e4053", "#283747", "#212f3c", "#1b2631"
))

val midnightBluePalette = HeatMapPalette("Midnight Blue", listOf(
    "#eaecee", "#d5d8dc", "#abb2b9", "#808b96", "#566573",
    "#2c3e50", "#273746", "#212f3d", "#1c2833", "#17202a"
))

val allPalettes: List<HeatMapPalette> = listOf(
    turquoisePalette,
    greenSeaPalette,
    emeraldPalette,
    nephritisPalette,
    peterRiverPalette,
    belizeHolePalette,
    amethystPalette,
    wisteriaPalette,
    sunflowerPalette,
    orangePalette,
    carrotPalette,
    pumpkinPalette,
    alizarinPalette,
    pomegranatePalette,
    cloudsPalette,
    silverPalette,
    concretePalette,
    asbestosPalette,
    wetAsphaltPalette,
    midnightBluePalette
)

// models/HexDirection.kt
package com.jmisabella.mazeq.models

enum class HexDirection {
    UP, UPPER_RIGHT, LOWER_RIGHT, DOWN, LOWER_LEFT, UPPER_LEFT;

    val systemImage: String
        get() = when (this) {
            UP -> "arrow.up"
            DOWN -> "arrow.down"
            UPPER_LEFT -> "arrow.up.left"
            UPPER_RIGHT -> "arrow.up.right"
            LOWER_LEFT -> "arrow.down.left"
            LOWER_RIGHT -> "arrow.down.right"
        }

    val vertexIndices: Pair<Int, Int>
        get() = when (this) {
            UP -> 0 to 1
            UPPER_RIGHT -> 1 to 2
            LOWER_RIGHT -> 2 to 3
            DOWN -> 3 to 4
            LOWER_LEFT -> 4 to 5
            UPPER_LEFT -> 5 to 0
        }

    val opposite: HexDirection
        get() = when (this) {
            UP -> DOWN
            UPPER_RIGHT -> LOWER_LEFT
            LOWER_RIGHT -> UPPER_LEFT
            DOWN -> UP
            LOWER_LEFT -> UPPER_RIGHT
            UPPER_LEFT -> LOWER_RIGHT
        }

    fun delta(): Pair<Int, Int> = when (this) {
        UP -> 0 to -1
        UPPER_RIGHT -> 1 to -1
        LOWER_RIGHT -> 1 to 0
        DOWN -> 0 to 1
        LOWER_LEFT -> -1 to 1
        UPPER_LEFT -> -1 to 0
    }

    fun offsetDelta(isOddColumn: Boolean): Pair<Int, Int> = when (this) {
        UP -> 0 to -1
        UPPER_RIGHT -> if (!isOddColumn) 1 to -1 else 1 to 0
        LOWER_RIGHT -> if (!isOddColumn) 1 to 0 else 1 to 1
        DOWN -> 0 to 1
        LOWER_LEFT -> if (!isOddColumn) -1 to 0 else -1 to 1
        UPPER_LEFT -> if (!isOddColumn) -1 to -1 else -1 to 0
    }
}

// models/MazeAlgorithm.kt
package com.jmisabella.mazeq.models

import kotlinx.serialization.Serializable

@Serializable
enum class MazeAlgorithm {
    ALDOUS_BRODER,
    BINARY_TREE,
    ELLERS,
    GROWING_TREE_NEWEST,
    GROWING_TREE_RANDOM,
    HUNT_AND_KILL,
    KRUSKALS,
    PRIMS,
    RECURSIVE_BACKTRACKER,
    RECURSIVE_DIVISION,
    REVERSE_DELETE,
    SIDEWINDER,
    WILSONS;

    val description: String
        get() = when (this) {
            ALDOUS_BRODER -> "This algorithm performs a random walk over the grid, carving a passage whenever it encounters an unvisited cell. It produces an unbiased maze, though it can be inefficient because it may visit cells many times."
            BINARY_TREE -> "This method iterates through each cell in a grid, carving passages either north or east (or in another fixed pair of directions). The result is a maze with a predictable bias and long, straight corridors."
            ELLERS -> "Eller’s algorithm builds the maze row by row, randomly joining cells within each row and ensuring connectivity to the next row. It produces mazes with a row-wise structure and is memory-efficient for infinite mazes."
            GROWING_TREE_NEWEST -> "This algorithm maintains a list of active cells, always choosing the newest one to carve a passage to an unvisited neighbor. It can mimic other algorithms like Recursive Backtracker."
            GROWING_TREE_RANDOM -> "This algorithm maintains a list of active cells, choosing one randomly to carve a passage to an unvisited neighbor. It can mimic other algorithms like Recursive Backtracker."
            HUNT_AND_KILL -> "Combining random walks with systematic scanning, this method randomly carves a passage until it reaches a dead end, then 'hunts' for an unvisited cell adjacent to the currently carved maze. This process creates mazes with long corridors and noticeable dead ends, balancing randomness with structure."
            KRUSKALS -> "Kruskal’s algorithm treats the grid as a graph, randomly merging cells by removing walls to form a minimum spanning tree. It creates mazes with a uniform, tree-like structure and no bias in direction."
            PRIMS -> "Prim’s algorithm starts with a random cell and grows the maze by adding passages to unvisited neighbors with the lowest random weights. It produces mazes with a uniform structure and moderate-length passages."
            RECURSIVE_BACKTRACKER -> "Essentially a depth-first search, this algorithm recursively explores neighbors and backtracks upon reaching dead ends. It’s fast and generates mazes with long, twisting passages and fewer short loops."
            RECURSIVE_DIVISION -> "This method starts with an open grid and recursively divides it into chambers by adding walls with random passages. It creates mazes with a hierarchical layout, featuring long walls and fewer dead ends."
            REVERSE_DELETE -> "Beginning with a fully open grid, this algorithm randomly adds walls between adjacent cells, but only if the addition doesn’t isolate any part of the maze. This creates a perfect maze with balanced passages and no directional bias."
            SIDEWINDER -> "Processed row-by-row, this algorithm carves eastward passages with occasional upward connections. It creates mazes with a strong horizontal bias and randomly placed vertical links."
            WILSONS -> "Wilson’s algorithm uses loop-erased random walks, starting from a random cell and extending a path until it connects with the growing maze. It produces uniformly random mazes and avoids the inefficiencies of Aldous-Broder."
        }

    val displayName: String
        get() = when (this) {
            ALDOUS_BRODER -> "Aldous Broder"
            BINARY_TREE -> "Binary Tree"
            ELLERS -> "Eller’s"
            GROWING_TREE_NEWEST -> "Growing Tree (Newest Selection)"
            GROWING_TREE_RANDOM -> "Growing Tree (Random Selection)"
            HUNT_AND_KILL -> "Hunt and Kill"
            KRUSKALS -> "Kruskal’s"
            PRIMS -> "Prim's"
            RECURSIVE_BACKTRACKER -> "Recursive Backtracker"
            RECURSIVE_DIVISION -> "Recursive Division"
            REVERSE_DELETE -> "Reverse Delete"
            SIDEWINDER -> "Sidewinder"
            WILSONS -> "Wilson's"
        }

    companion object {
        fun availableAlgorithms(mazeType: MazeType): List<MazeAlgorithm> = when (mazeType) {
            MazeType.ORTHOGONAL -> enumValues<MazeAlgorithm>().toList()
            MazeType.RHOMBIC -> enumValues<MazeAlgorithm>().filterNot {
                listOf(BINARY_TREE, SIDEWINDER, ELLERS, GROWING_TREE_NEWEST, GROWING_TREE_RANDOM, HUNT_AND_KILL).contains(it)
            }
            else -> enumValues<MazeAlgorithm>().filterNot {
                listOf(BINARY_TREE, SIDEWINDER, ELLERS, RECURSIVE_DIVISION).contains(it)
            }
        }
    }
}

// models/MazeCell.kt
package com.jmisabella.mazeq.models

data class MazeCell(
    val x: Int,
    val y: Int,
    val mazeType: String,
    val linked: List<String>,
    val distance: Int,
    val isStart: Boolean,
    val isGoal: Boolean,
    val isActive: Boolean,
    val isVisited: Boolean,
    val hasBeenVisited: Boolean,
    val onSolutionPath: Boolean,
    val orientation: String,
    val isSquare: Boolean
)

// models/MazeDirection.kt
package com.jmisabella.mazeq.models

enum class MazeDirection {
    UP, DOWN, LEFT, RIGHT,
    UPPER_LEFT, UPPER_RIGHT, LOWER_LEFT, LOWER_RIGHT;

    val systemImage: String
        get() = when (this) {
            UP -> "arrow.up"
            DOWN -> "arrow.down"
            LEFT -> "arrow.left"
            RIGHT -> "arrow.right"
            UPPER_LEFT -> "arrow.up.left"
            UPPER_RIGHT -> "arrow.up.right"
            LOWER_LEFT -> "arrow.down.left"
            LOWER_RIGHT -> "arrow.down.right"
        }
}

// models/MazeRequest.kt
package com.jmisabella.mazeq.models

import kotlinx.serialization.EncodeDefault
import kotlinx.serialization.Serializable

@Serializable
data class MazeRequest(
    val mazeType: MazeType,
    val width: Int,
    val height: Int,
    val algorithm: MazeAlgorithm,
    @EncodeDefault val captureSteps: Boolean = false
)

// models/MazeRequestError.kt
package com.jmisabella.mazeq.models

sealed class MazeRequestError : Exception() {
    abstract val errorDescription: String?
}

object INVALID_MAZE_TYPE : MazeRequestError() {
    override val errorDescription: String? = "The selected maze type is invalid."
}

object INVALID_DIMENSIONS : MazeRequestError() {
    override val errorDescription: String? = "The provided maze dimensions are invalid."
}

object START_AND_GOAL_COORDINATES_SAME : MazeRequestError() {
    override val errorDescription: String? = "Start and goal coordinates cannot be the same."
}

object INVALID_COORDINATES : MazeRequestError() {
    override val errorDescription: String? = "One or more coordinates are out of bounds."
}

object INVALID_ALGORITHM : MazeRequestError() {
    override val errorDescription: String? = "The selected algorithm is not valid for this maze type."
}

object INVALID_DIMENSIONS_FOR_CAPTURE_STEPS : MazeRequestError() {
    override val errorDescription: String? = "Capture steps is only available for mazes with width and height ≤ 100."
}

object INVALID_MAZE_REQUEST_JSON : MazeRequestError() {
    override val errorDescription: String? = "The maze request JSON is malformed."
}

// models/MazeType.kt
package com.jmisabella.mazeq.models

import com.jmisabella.mazeq.models.MazeAlgorithm.ALDOUS_BRODER
import com.jmisabella.mazeq.models.MazeAlgorithm.BINARY_TREE
import com.jmisabella.mazeq.models.MazeAlgorithm.ELLERS
import com.jmisabella.mazeq.models.MazeAlgorithm.GROWING_TREE_NEWEST
import com.jmisabella.mazeq.models.MazeAlgorithm.GROWING_TREE_RANDOM
import com.jmisabella.mazeq.models.MazeAlgorithm.HUNT_AND_KILL
import com.jmisabella.mazeq.models.MazeAlgorithm.KRUSKALS
import com.jmisabella.mazeq.models.MazeAlgorithm.PRIMS
import com.jmisabella.mazeq.models.MazeAlgorithm.RECURSIVE_BACKTRACKER
import com.jmisabella.mazeq.models.MazeAlgorithm.RECURSIVE_DIVISION
import com.jmisabella.mazeq.models.MazeAlgorithm.REVERSE_DELETE
import com.jmisabella.mazeq.models.MazeAlgorithm.SIDEWINDER
import com.jmisabella.mazeq.models.MazeAlgorithm.WILSONS
import kotlinx.serialization.Serializable

@Serializable
enum class MazeType {
    DELTA,
    ORTHOGONAL,
    RHOMBIC,
    SIGMA,
    UPSILON;

    val description: String
        get() = when (this) {
            DELTA -> "Triangular cells (normal and inverted) creating jagged, complex paths."
            ORTHOGONAL -> "Orthogonal mazes carve a classic square-grid layout with straight paths and right-angle turns."
            RHOMBIC -> "Diamond cells forming a grid with slanted paths."
            SIGMA -> "Hexagonal cells forming a web of interconnected paths, promoting more intuitive navigation."
            UPSILON -> "Alternating octagon and square cells add variety to pathfinding."
        }

    val ffiName: String
        get() = when (this) {
            DELTA -> "Delta"
            ORTHOGONAL -> "Orthogonal"
            RHOMBIC -> "Rhombic"
            SIGMA -> "Sigma"
            UPSILON -> "Upsilon"
        }

    val displayName: String
        get() = when (this) {
            DELTA -> "Delta"
            ORTHOGONAL -> "Ortho"
            RHOMBIC -> "Rhombic"
            SIGMA -> "Sigma"
            UPSILON -> "Upsilon"
        }

    companion object {
        fun fromFFIName(name: String?): MazeType? = when (name) {
            "Delta" -> DELTA
            "Orthogonal" -> ORTHOGONAL
            "Sigma" -> SIGMA
            "Upsilon" -> UPSILON
            "Rhombic" -> RHOMBIC
            else -> null
        }

        fun availableMazeTypes(isSmallScreen: Boolean): List<MazeType> =
            if (isSmallScreen) enumValues<MazeType>().filter { it != RHOMBIC } else enumValues<MazeType>().toList()
    }
}


